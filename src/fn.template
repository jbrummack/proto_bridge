
    let $ARGUMENT_input_slice = unsafe { slice::from_raw_parts($ARGUMENT.data_pointer, args.len) };
    let decode = $TO_RUST::decode($ARGUMENT_input_slice);
    let request = match decode {
        Ok(req) => req,
        Err(_) => {
            eprintln!("Failed to parse input Protocol Buffer for $ARGUMENT");
            return MessageFatPointer {
                data_pointer: std::ptr::null(),
                len: 1,
            };
        }
    };
    let response: $FROM_RUST = process_request(request);

    let response_bytes = response.encode_to_vec();

    // Call the callback with the serialized response
    let $ARGUMENT_message = MessageFatPointer {
        data_pointer: response_bytes.as_ptr(),
        len: response_bytes.len(),
    };
}
